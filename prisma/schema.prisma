generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FACULTY
  STUDENT
}

enum Status {
  COMPLETED
  FAILED
  PENDING
  PARTIAL
}

enum TestCaseStatus {
  PASSED
  FAILED
  ERROR
  TIMEOUT
  PENDING
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role     @default(STUDENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  onboarded     Boolean @default(false) 
  accounts      Account[]

  classrooms     Classroom[] @relation("FacultyClassrooms")  // Faculty-created classrooms
  enrolledClasses Classroom[] @relation("StudentClasses")  // Student-joined classrooms

  submissions    Submission[]
  evaluationMetrics EvaluationMetric[]
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Classroom {
  id          String    @id @default(uuid())
  name        String
  section     String
  code        String    @unique
  inviteLink  String    @unique
  facultyId   String
  facultyName String
  faculty     User      @relation("FacultyClassrooms", fields: [facultyId], references: [id], onDelete: Cascade)
  students    User[]    @relation("StudentClasses")
  assignments Assignment[]
  createdAt   DateTime  @default(now())
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  questions   Question[]
  DueDate     DateTime? 
  metrics AssignmentMetric[]
  createdAt   DateTime  @default(now())

  copyPastePrevention   Boolean @default(false)
  fullScreenEnforcement Boolean @default(false)
}

model Question {
  id           String    @id @default(uuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete:Cascade)
  title        String
  description  String
  language     String
  testCases    TestCase[]
  createdAt    DateTime  @default(now())
  Submission Submission[]
}

model TestCase {
  id          String  @id @default(uuid())
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  input       String
  expectedOutput String
  hidden      Boolean @default(false)
  weight      Int     @default(1) // Simple weight for scoring
  isBonus     Boolean @default(false) // Optional bonus test cases
  description String? // Description of what the test case is checking
  
  // Relation to test case results
  testCaseResults TestCaseResult[]
}

model Submission {
  id            String   @id @default(uuid())
  studentId     String
  student       User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  questionId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  code          String
  language      String
  status        Status  @default(PENDING) 
  score         Float?    // Faculty can assign a score
  feedback      String?
  plagiarismScore Float? // Store plagiarism detection results
  testCaseResults TestCaseResult[]
  metricResults SubmissionMetricResult[]
  createdAt     DateTime @default(now())
}

model TestCaseResult {
  id            String        @id @default(uuid())
  submissionId  String
  submission    Submission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCaseId    String
  testCase      TestCase      @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  status        TestCaseStatus @default(PENDING)
  actualOutput  String?       // The actual output from running the test case
  executionTime Int?          // Time taken to execute in milliseconds
  errorMessage  String?       // If there was an error, store the message
  judge0Token   String?
  createdAt     DateTime      @default(now())

  @@unique([submissionId, testCaseId]) // One result per test case per submission
}

model EvaluationMetric {
  id          String   @id @default(uuid())
  name        String   // e.g. "Correctness", "Code Quality"
  description String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  assignments AssignmentMetric[]
  results     SubmissionMetricResult[]
}

model AssignmentMetric {
  id             String            @id @default(uuid())
  assignmentId   String
  assignment     Assignment        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  metricId       String
  metric         EvaluationMetric  @relation(fields: [metricId], references: [id], onDelete: Cascade)
  weight         Float              // e.g. 0.2 for 20%
  //config         Json?              // metric-specific settings
  createdAt      DateTime           @default(now())
}

model SubmissionMetricResult {
  id            String            @id @default(uuid())
  submissionId  String
  submission    Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  metricId      String
  metric        EvaluationMetric  @relation(fields: [metricId], references: [id], onDelete: Cascade)
  score         Float              // 0â€“1 normalized
  feedback      String?
  createdAt     DateTime           @default(now())

  @@unique([submissionId, metricId])
}
